* psr
* question

*include require() =include_once= =require_once= 的区别*

- include 这个函数一般是放在流程控制的处理部分中。PHP 程序网页在读到 include 的文件时，才将它读进来。这种方式，可以把程序执行时的流程简单化， include() 包括并运行指定文件 在处理失败时 include 产生一个警告,被导入的程序代码都会被执行，include 有返回值
- require() 这个函数通常放在php程序的最前面，PHP 程序在执行前，就会先读入 require() 所指定引入的文件，使它变成 PHP 程序网页的一部份，require() 一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误，require() 没有返回值
- include_once() 的作用和 include_once() 是几乎相同的，唯一的差别在于 include_once() 会先检查要导入的档案是不是已经在该程序中的其它地方被导入过了，如果有的话就不会再次重复导入（这项功能有时候是很重要的，比方说要导入的里面宣告了一些你自行定义好的函数，那么如果在同一个程序重复导入这个文件，在第二次导入的时候便会发生错误讯息，因为PHP不允许相同名称的函数被重复宣告第二次）。

*用什么办法检查 PHP 脚本的执行效率（通常是脚本执行时间）*

#+BEGIN_QUOTE
一般实在要检查的代码开头记录一个时间，结尾记录一个时间，取差值
#+END_QUOTE

#+BEGIN_SRC 
<?php

function microtime_float()
{
    list($usec, $sec) = explode(" ", microtime());
    return ($usec + $sec);
}

$time_start = microtime_float();
/*
 *
 */
$time_end = microtime_float();
$time = $time_end - $time_start;
echo "$time";
#+END_SRC

*冒泡排序*
#+BEGIN_SRC 
<?php
$array = array(12,35,68,23,90,35,46,756);
$len = count($array);
for ($i=0; $i < $len; $i++) {
    for ($j = $i + 1; $j < $len; $j++) {
        if ($array[$i] > $array[$j]) {
            $tmp = $array[$i];
            $array[$i] = $array[$j];
            $array[$j] = $tmp;
        }
    }
}
print_r($array);
#+END_SRC

*echo 和 print 的区别*

#+BEGIN_QUOTE
echo 接受参数列表， print 仅支持一个参数 
#+END_QUOTE

*什么是php*

- php是一种开源脚本语言
- php是一种向前在html中，运行在服务器端的脚本语言

*把字符串转换为大写*

#+BEGIN_QUOTE
strtupper() 这个函数将字符串转换为大写 str to upper
#+END_QUOTE

*把字符串转换为小写*

#+BEGIN_QUOTE
strtolower() 此函数将字符串转换为小写 str to lower
#+END_QUOTE

*把字符串首字母转换为大写*

#+BEGIN_QUOTE
ucfirst() 此函数将字符串首字符(如果字符是字母)转换为大写字母 uc first
#+END_QUOTE

*把字符串地一个字符小写*

#+BEGIN_QUOTE
lcfirst() 使一个字符串的地一个字符小写 lc first
#+END_QUOTE

*把字符串中的每个单词的首字母转为大写*

#+BEGIN_QUOTE
ucwords() 将字符串中每个单词的首字母转换为大写 uc word s
#+END_QUOTE

*对字符串进行大小写转换*

#+BEGIN_QUOTE
mb_convert_case() 对字符串进行大小写转换,转换模式由mode指定
#+END_QUOTE

*session和cookie的区别*

- cookie 数据保存在客户的浏览器上，session 数据保存在服务器上
- cookie 不是很安全，别人可能进行 cookie 欺骗，考虑到安全应当使用 session
- session 会在一定时间内保存在服务器上，当访问增多，会比较占用服务器性能，考虑到减轻服务器性能方面应当使用 cookie
- 重要的资料用 session 不重要的用 cookie
- 单个 cookie 体积限制是4k session 可以通过设置修改

*如果禁用了cookie 可不可以用session*

#+BEGIN_QUOTE
可以，通常情况下 cookie 中记录了 session 的id 所以 cookie 被禁用了也就意味着 session 失效了。不过 session-id 还有另外一种传递方式，就是在url查询中携带 session-id

 session 不一定必须依赖 cookie cookie 被禁用或者出现问题时，php会自动把 session-id 附在url中，但是php.ini中的 =session.use_trans_sid= = 1
#+END_QUOTE

*session的默认生命周期是多久*

#+BEGIN_QUOTE
关闭浏览器就失效，因为 session-id 存在于 cookie 而默认情况下 cookie 关闭浏览器即失效
#+END_QUOTE

*如何设置session生命周期为30分钟*

#+BEGIN_QUOTE
在php.ini配置文件中 session.cookie_lifetime=1800 单位为秒
#+END_QUOTE

*get和post提交方法的区别*

- get 和 post 理论上没有大小限制，但是 get 的长度和 url 的长度有直接关系 http协议没有对 url 长度进行限制 ie浏览器最url最大限制为 2083 字节 其他浏览器更多，所以 get 最好限制在 2083 字节

