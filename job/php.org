# بِسْمِ اللّهِ الرَّحْمـَنِ الرَّحِيمِ

*include require() ~include_once~ ~require_once~ 的区别*

- include 这个函数一般是放在流程控制的处理部分中。PHP 程序网页在读到 include 的文件时，才将它读进来。这种方式，可以把程序执行时的流程简单化， include() 包括并运行指定文件 在处理失败时 include 产生一个警告,被导入的程序代码都会被执行，include 有返回值
- require() 这个函数通常放在php程序的最前面，PHP 程序在执行前，就会先读入 require() 所指定引入的文件，使它变成 PHP 程序网页的一部份，require() 一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误，require() 没有返回值
- ~include_once()~ 的作用和 ~include_once()~ 是几乎相同的，唯一的差别在于 ~include_once()~ 会先检查要导入的档案是不是已经在该程序中的其它地方被导入过了，如果有的话就不会再次重复导入（这项功能有时候是很重要的，比方说要导入的里面宣告了一些你自行定义好的函数，那么如果在同一个程序重复导入这个文件，在第二次导入的时候便会发生错误讯息，因为PHP不允许相同名称的函数被重复宣告第二次）。
-----
*用什么办法检查 PHP 脚本的执行效率（通常是脚本执行时间）*
#+BEGIN_QUOTE
一般实在要检查的代码开头记录一个时间，结尾记录一个时间，取差值
#+END_QUOTE
#+BEGIN_SRC 
<?php

function microtime_float() {
    list($usec, $sec) = explode(" ", microtime());
    return ($usec + $sec);
}

$time_start = microtime_float();
/*
 *
 */
$time_end = microtime_float();
$time = $time_end - $time_start;
echo "$time";

#+END_SRC
-----
*冒泡排序*
#+BEGIN_SRC 
<?php
$array = array(12,35,68,23,90,35,46,756);
$len = count($array);
for ($i=0; $i < $len; $i++) {
    for ($j = $i + 1; $j < $len; $j++) {
        if ($array[$i] > $array[$j]) {
            $tmp = $array[$i];
            $array[$i] = $array[$j];
            $array[$j] = $tmp;
        }
    }
}
print_r($array);

#+END_SRC
-----
*echo 和 print 的区别*
#+BEGIN_QUOTE
echo 接受参数列表， print 仅支持一个参数 
#+END_QUOTE
-----
*什么是php*
- php是一种开源脚本语言
- php是一种镶嵌在html中，运行在服务器端的脚本语言
-----
*把字符串转换为大写*
#+BEGIN_QUOTE
strtouper() 这个函数将字符串转换为大写 str to upper
#+END_QUOTE
-----
*把字符串转换为小写*
#+BEGIN_QUOTE
strtolower() 此函数将字符串转换为小写 str to lower
#+END_QUOTE
-----
*把字符串首字母转换为大写*
#+BEGIN_QUOTE
ucfirst() 此函数将字符串首字符(如果字符是字母)转换为大写字母 uc first
#+END_QUOTE
-----
*把字符串地一个字符小写*
#+BEGIN_QUOTE
lcfirst() 使一个字符串的地一个字符小写 lc first
#+END_QUOTE
-----
*把字符串中的每个单词的首字母转为大写*
#+BEGIN_QUOTE
ucwords() 将字符串中每个单词的首字母转换为大写 uc word s
#+END_QUOTE
-----
*对字符串进行大小写转换*
#+BEGIN_QUOTE
~mb_convert_case()~ 对字符串进行大小写转换,转换模式由mode指定
#+END_QUOTE
-----
*session和cookie的区别*
- cookie 数据保存在客户的浏览器上，session 数据保存在服务器上
- cookie 不是很安全，别人可能进行 cookie 欺骗，考虑到安全应当使用 session
- session 会在一定时间内保存在服务器上，当访问增多，会比较占用服务器性能，考虑到减轻服务器性能方面应当使用 cookie
- 重要的资料用 session 不重要的用 cookie
- 单个 cookie 体积限制是4k session 可以通过设置修改
-----
*如果禁用了cookie 可不可以用session*
#+BEGIN_QUOTE
可以，通常情况下 cookie 中记录了 session 的id 所以 cookie 被禁用了也就意味着 session 失效了。不过 session-id 还有另外一种传递方式，就是在url查询中携带 session-id

 session 不一定必须依赖 cookie cookie 被禁用或者出现问题时，php会自动把 session-id 附在url中，但是php.ini中的 ~session.use_trans_sid~ = 1
#+END_QUOTE
-----
*session的默认生命周期是多久*
#+BEGIN_QUOTE
关闭浏览器就失效，因为 session-id 存在于 cookie 而默认情况下 cookie 关闭浏览器即失效
#+END_QUOTE
-----
*如何设置session生命周期为30分钟*
#+BEGIN_QUOTE
在php.ini配置文件中 ~session.cookie_lifetime~ =1800 单位为秒
#+END_QUOTE
-----
*get和post提交方法的区别*
- get 和 post 理论上没有大小限制，但是 get 的长度和 url 的长度有直接关系 http协议没有对 url 长度进行限制 ie浏览器最url最大限制为 2083 字节 其他浏览器更多，所以 get 最好限制在 2083 字节
- get 放在url中，因此不安全，而 post 传输数据相对安全
- get是从服务器上获取数据,post是向服务器传送数据
-----
*检测一个变量是否有设置的函数*
#+BEGIN_QUOTE
isset() 检测变量是否设置，并且不是 NULL。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。
#+END_QUOTE
-----
*检测一个变量是否为空的函数*
#+BEGIN_QUOTE
empty() 判断一个变量是否被认为是空，如果变量是非空或非零的值，则 empty() 返回 FALSE。换句话说，""、0、"0"、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。
#+END_QUOTE
-----
*在php中插入一段html的办法*
#+BEGIN_SRC 
<?php
echo '<h1>aaaaaaaaaaaaaa</h1>';
?>
#+END_SRC
#+BEGIN_SRC
<?php
print <<<EOF
<h1>aaaaaaaaaaaaaaaa</h1>
EOF;
?>
#+END_SRC
-----
*类的属性可以序列化后保存到session中，从而以后可以回复整个类，这要用的函数是*
#+BEGIN_QUOTE
serialize() 产生一个可存储的值的表示
unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值
#+END_QUOTE
-----
*在php中，heredoc是一种特殊的字符串，它的结束标志必须*
#+BEGIN_QUOTE
heredoc的语法是用 "<<<" 加上自己定义成对的标签，在标签范围内的文字视为一个字符串
#+END_QUOTE
-----
*用php打印出前一天的时间，格式是2006-5-10 22:22:21*
#+BEGIN_QUOTE
echo date('Y-m-d H:i:s', strtotime('-1 day');
#+END_QUOTE
-----
*php的public protected private三种访问控制模式的区别*
- public 公有 任何地方都可以访问
- protected 受保护类型 用于本类和继承类调用
- private 私有类型 只能在本类中使用
-----
*写出php权限控制修饰符*
| public | protected | private |

*接口和抽象类的区别是什么*
- 抽象类 是一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字 abstract 来生命的。抽象类 与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一种 抽象方法 抽象方法 没有方法体，该方法天生就是要被子类重写的 抽象方法的格式为 abstract function abstractMethod();
- 接口 是通过 interface 关键字来声明的 接口 中的成员常量和方法都是 public 的，方法可以不写关键字 public 接口 中的方法也是没有方法体。接口 中的方法也天生就是要被子类实现的
- 抽象类 和 接口 实现的功能十分相似，最大的不同是 接口 能实现多继承。
- 子类继承 抽象类 使用 extends 子类实现 接口 使用 implements
-----
*类中如何定义常量*
#+BEGIN_QUOTE
类中的常量也就是成员常量，常量就是不会改变的量，是一个恒值。定义常量使用关键字 const 例如 const pl = 3.14;
#+END_QUOTE
-----
*如何类中调用常量，如何类外调用常量*
#+BEGIN_QUOTE
无论类内还是类外，常量的访问和变量是不一样的，常量不需要实例化对象，访问常量的格式都是类型加作用域操作符（双冒号）来调用，即 类名::类常量名
#+END_QUOTE
-----
*~__autoload()~ 函数是如何运作的*
#+BEGIN_QUOTE
使用这个魔术函数的基本条件是 类文件 的 文件名 要和 类的名字 保持一致。

当程序执行到实例化某个类的时候，如果在实例化前没有引入这个类文件，那么自动执行 ~__autoload()~ 函数

这个函数会根据实例化的类的名称来查找这个类文件的路径，当判断这个类文件路径下确实存在这个类文件后就来载入这个类，然后程序继续执行，如果这个路径下不存在该文件时就提示错误
#+END_QUOTE
-----
*哪种oop设计模式能让类在整个脚本里中实例化一次*
#+BEGIN_QUOTE
单件模式
#+END_QUOTE
-----
*借助继承，我们可以创建其他类的派生类，在php中，子类最多可以继承几个父类*
#+BEGIN_QUOTE
1个
#+END_QUOTE
-----
*写出你知道的几种设计模式*
#+BEGIN_QUOTE
单例模式 工厂模式
#+END_QUOTE
-----
*执行以下代码，输出的结果是*
#+BEGIN_SRC 
<?php
    abstract class a{
        function __construct()
        {
            echo "a";
        }
    }

    $a = new a();

#+END_SRC
致命错误，因为类a是抽象类，不能被实例化
-----
*执行以下代码，输出结果是*
#+BEGIN_SRC 
<?php
class a{
    function __construct(){
        echo "echo class a something";
    }
}

class b extends a{
    function __construct(){
        echo "echo class b something";
    }
}

$a = new b();

#+END_SRC
echo class b somehing
-----
#+BEGIN_QUOTE
类b继承类a，两个类都定义了构造函数，由于二者名称相同，所以子类中的构造函数覆盖了父类的构造函数，要想子类对象实例化时也执行父类的构造函数，需要在子类构造函数中使用 ~parent::__construct()~ 来显示调用父类构造函数
#+END_QUOTE
*请定义一个名为MyClass的类，这个类只有一个静态方法justDoIt*
#+BEGIN_SRC 
<?php
class MyClass
{
    public static function justDoIt() {
    }
}

#+END_SRC
-----
*只有该类才能访问该类的私有变量吗*
#+BEGIN_QUOTE
是的
#+END_QUOTE
-----
*写出下列程序的输出结果*
#+BEGIN_SRC 
<?php
    class a
    {
        protected $c;

        public function a()
        {
            $this ->c = 10;
        }
    }
    
    class b extends a
    {
        public function print_data()
        {
            return $this->c;
        }
    }

    $b = new b();
    echo $b->print_data();

#+END_SRC
输出结果 10
-----
*写出构造函数和析构函数*
- 构造函数 __construct
- 析构函数 __destruct
-----
*下面这段代码是什么意思*
#+BEGIN_SRC 
<?php
    class test
    {
        function get_test($num) {
            $num = md5(md5($num)."en");
        }
    }

    $testobject = new test();
    $encryption = $testobject->get_test("abc");
    echo $encryption;

#+END_SRC
双重md5加密
-----
*如何声明一个名为"myclass"的没有方法和属性的类*
#+BEGIN_SRC 
<?php
    class myclass
    {
    }

#+END_SRC
-----
*如何实例化一个名为"myclass"的对象*
#+BEGIN_SRC 
<?php
    $obj = new myclass();

#+END_SRC
-----
*在php中 ~error_reporting() 这个函数有什么作用*
#+BEGIN_QUOTE
~error_reporting()~ 用于设置php的侦听错误的级别
#+END_QUOTE
-----
*php如何限制上传文件的大小*
#+BEGIN_QUOTE
- ~upload_max_filesize~ 默认是2M
- ~post_max_size~ 默认是8M
#+END_QUOTE
-----
*数据库中的事务是什么*
#+BEGIN_QUOTE
事务 是作为一个逻辑单元执行的一系列操作，一个逻辑工作单元必须有四个属性，称为 ACID (原子性 一致性 隔离性 持久性)
#+END_QUOTE
- 原子性 事务 必须是原子工作单元，对其数据修改，要么全部执行，要不全部不执行
- 一致性 事务 在完成时，必须使所有的数据都保持一致状态。在数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性 事务 结束时，所有的内部数据（如B树索引或双向链表）都必须是正确的
- 隔离性 由 并发事务 所作的修改必须与任何其他 并发事务 所做的修改隔离 事务 查看数据时数据所处的状态，要么是另一 并发事务 修改它之前的状态，要么是另一 事务 修改它之后的状态 事务 不会查看中间状态的数据。这称为 可串行性 因为它能够重新装载起始数据，并且重播一系列 事务 以使数据结束时状态与 原始事务 执行的状态相同
- 持久性 事务 完成之后，它对于系统的影响是永久性的。该修改即使出现系统故障也将一直保持
-----
*mysql取得当前时间的函数*
#+BEGIN_QUOTE
NOW() 该函数返回当前系统的日期和时间
#+END_QUOTE
#+BEGIN_SRC sql
SELECT NOW();
#+END_SRC
-----
*mysql格式化日期的函数*
#+BEGIN_QUOTE
DATE_FORMAT($date, $format)
#+END_QUOTE
#+BEGIN_SRC sql
DATE_FORMAT(NOW(), '%Y %m %%d');
#+END_SRC
-----
*如何查看sql语句执行时间*
#+BEGIN_QUOTE
explain
#+END_QUOTE
-----
*请给出sql语句优化的几种方案*
- 尽量选择较小的列
- 将 where 中用的比较频繁的字段建立索引
- select 子句中避免使用 *
- 避免在索引例上使用计算 not in < > 等操作
- 当只需要一行数据的时候使用 limit 1
- 保证单表数据不超过200w，适时分割表
-----
*MyISAM和InnoDB的区别*
- 构成上，MyISAM 的表在磁盘中有三个文件组成，分别是 表定义文件(.frm) 数据文件(.MYD) 索引文件(.MYI) 而 InnoDB 的表由 表定义文件(.frm) 表空间数据和日志文件组成
- 安全方面 MyISAM 强调的是性能，其查询效率较高，但不支持事务和外键等安全性能方面的功能，而 InnoDB 支持事务和外键等高级功能，查询效率稍低
- 对锁的支持 MyISAM 支持表锁，而 InnoDB 支持行锁
-----
*数据库索引分几类，分别是什么*
| 主索引 | 唯一索引 | 普通索引 | 全文索引 |
-----
*什么时候使用索引*
#+BEGIN_QUOTE
并非所有的数据库都以相同的方式使用索引，作为通用规则，只有当经常查询列中的数据时，才需要在表上创建索引
#+END_QUOTE
-----
*索引的目的是什么*
- 快速访问数据表中特定的信息，提高检索速度
- 创建唯一索引，保证数据库表中每一行数据的唯一性
- 加速表与表之间的连接
- 使用分组和排序子句进行数据检索时，可以显著减少查询分组和排序的时间
-----
*为数据表建立索引的原则有哪些*
- 在最频繁使用的，用以缩小查询范围的字段上建立索引
- 在频繁使用的，需要排序的字段上建立索引
-----
*索引对数据库负面的影响是什么*
- 创建索引维护索引需要消耗时间，这个时间随着数据量的增加而增加
- 索引需要占用物理空间，不光是表需要占用物理空间，每个索引也需要占用物理空间
- 当对表进行 增 删 改 查 的时候索引也需要动态的维护，这样就降低了数据的维护速度
-----
*什么情况下不宜建立索引*
- 对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引
- 对于一些特殊的据哭类型，不宜建立索引，比如文本字段等
-----
*内连接和外链接的区别*
- 内连接取两个表的交集，外连接分左和右，左连接取左边的全部，右连接取右边的全部
- 内连接，进行连接的两个表对应的想匹配的字段完全相同的连接
- 左连接(LEFT OUTER JOIN)，两个表左连接时会返回左边表中的所有行和右边表中与之相匹配的列值，如果没有则用空值代替
- 右连接(RIGHT OUTER JOIN)，两个表进行右连接时会返回右边表中的所有的行和左边表中与之想匹配的列值，没有匹配的用空值代替
-----
*用php打印出前一天的时间,格式是 2016-5-10 22:21:21 如何实现?*
#+BEGIN_SRC 
<?php
echo date('Y-m-d H:i:s', strtotime('-1 days');

#+END_SRC
-----
*如何实现字符串"Hi Boya"翻转*
#+BEGIN_SRC 
<?php
$str = strrev("Hi Boya");

#+END_SRC
-----
*请写出实现汉语字符串截取无乱码的方法*
#+BEGIN_SRC 
<?php
echo mb_substr('这样一来,汉语没有乱码', 0, 7, 'utf-8');

#+END_SRC
-----
*什么是 oauth2.0 授权?*
#+BEGIN_QUOTE
OAuth(开放授权)是一种开放标准,允许用户授权第三方网站访问他们存储在另外的服务器提供者上的信息,而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容
#+END_QUOTE
-----
*如何打开php的错误报告?*
修改php.ini文件
#+BEGIN_EXAMPLE
display_errors = On
#+END_EXAMPLE
-----
*js表单淡出对话框函数是什么?获得输入焦点函数是什么?*
#+BEGIN_EXAMPLE
弹出对话框: alert()
获得输入焦点: focus()
#+END_EXAMPLE
-----
*下面哪个函数可以打开一个文件,以对文件进行读和写操作?*
- [ ] fget()
- [ ] ~file_open()~
- [-] fopen()
- [ ] ~open_file()~
-----
*下面哪个选项没有将john添加到users数组中?*
- [ ] $users[] = 'john';
- [-] array_add($users, 'john');
- [ ] array_push($users, 'john');
- [ ] $users ||= 'john';
-----
*写出以下程序的输出结果*
#+BEGIN_SRC 
<?php
$b = 201;
$c = 40;
$a = $b >$c?4:5;
echo $a;
#+END_SRC
*4*
-----
*请写出php5的构造函数和析构函数*
#+BEGIN_QUOTE
构造函数: ~__construct()~
析构函数: ~__destruct()~
#+END_QUOTE
-----
*你知道的加密算法有几种?*
| DES | AES | MD5 | RSA |
-----
*用php写出显示客户端ip与服务器ip的代码*
#+BEGIN_SRC 
<?php
echo "客户端ip地址:" . '&nbsp' . '"' . $_SERVER['REMOTE_ADDR'] . '"';
echo '</br>'
echo "服务器ip地址:" . '&nbsp' . '"' . $_SERVER['SERVER_ADDR'] . '"';

#+END_SRC
-----
*UTF-8 编码文件的 BOM 头 占几个 byte?*
#+BEGIN_QUOTE
BOM(Byte Order Mark) 占用 *3* byte
#+END_QUOTE
-----
*如何修改session的生存时间*
#+BEGIN_QUOTE
修改php.ini
#+END_QUOTE
#+BEGIN_EXAMPLE
session.cookie_lifetime = $expiretime
#+END_EXAMPLE
#+BEGIN_QUOTE
或者在 ~session_start()~ 之前,用 ~session_set_cookie_params($expiretime)~ 来修改
#+END_QUOTE
#+BEGIN_SRC 
<?php
$lifetime = 86400;
session_set_cookie_params($lifetime);
session_start();
$_SESSION['example'] = true;

#+END_SRC
-----
*谈谈你对MVC理解*
#+BEGIN_QUOTE
由模型(Model),视图(View),控制器(Controller)完成的应用程序

由模型发出要实现的功能到控制器,控制器接受组织功能传递给视图
#+END_QUOTE
-----
*写出发帖数最多的是个人名字的sql,利用下表: members(id,username,posts,pass,email)*
#+BEGIN_SRC sql
SELECT username FROM members ORDER BY posts DESC LIMIT 10;
#+END_SRC
-----
*请说明php中传值与传引用的区别*
#+BEGIN_QUOTE
传值: 函数范围内对值的任何改变在函数外部都会被忽略

传引用: 函数范围内对值的任何改变在函数外部也能反映出这些改变
#+END_QUOTE
-----
*写一个函数,给一个日期,输出该日期的前一天,输出日期格式为 2014-05-19 14:30:22*
#+BEGIN_SRC 
<?php
function to_yesterday($time) {
    $time_stamp = strtotime($time);
    $to_yesterday_time_stamp = $time_stamp - 86400;
    date('Y-m-d H:i:s', $to_yesterday_time_stamp);
}

#+END_SRC
-----
*写一个函数,从一个标准url中获取文件的扩展名*
#+BEGIN_SRC 
<?php
function get_extension($url) {
    $extension = pathinfo($url, PATHINFO_EXTENSION);
    strstr($extension, '?', true);
}

#+END_SRC
-----
*ajax是什么?同步和异步的区别*
#+BEGIN_QUOTE
AJAX全称为"Asynchronous JavaScript And XML"(异步JavaScript和XML),是一种创建交互式网页应用的网页开发技术

- 同步: 脚本会停留并等待服务器发出回复然后再继续
- 异步: 脚本允许页面继续其进程并处理可能的回复
#+END_QUOTE
-----
*http协议中几个状态码的含义: 502 500 403 401 301 200*
- 502: 网关错误
- 500: 服务器内部错误
- 403: 禁止
- 401: 未授权
- 301: 永久移动
- 200: ok
-----
*php中有集中形式装载代码,并列举,以包含同目录下的config.php为例*
#+BEGIN_SRC 
<?php
require('./config.php');

#+END_SRC
#+BEGIN_SRC 
<?php
include('./config.php');

#+END_SRC
#+BEGIN_SRC 
<?php
require_once('./config.php');

#+END_SRC
#+BEGIN_SRC 
<?php
include_once('./config.php');

#+END_SRC
-----
*写几个常用的php数组函数并简述函数用法*

count() 计算数组中的单元数目,或对象中的属性个数

current() 返回数组中的当前单元

next() 将数组中的内部指针向前移动一位

prev() 将数组的内部指针倒回一位

implode() 将一个一维数组的值转化为字符串
-----
*写出几个常用的php字符串函数并且简述函数用法*

strlen() 获取字符串长度

substr() 返回字符串的子串

substr_count() 计算字符串出现的次数

strstr() 查找字符串的首次出现

strrev() 反转字符串
-----
*写出php的三种注释方式,区别*
#+BEGIN_SRC 
<?php
echo 'example';//单行注释

#+END_SRC
#+BEGIN_SRC 
<?php
echo 'example';
/*
这是
多行注释
*/

#+END_SRC

#+BEGIN_SRC
<?php
echo 'example';
/*
~* 这是
~* 多行注释
~* 波浪号是因为orgmode会把行首的 * 解析为 标题行
*/

#+END_SRC

- 单行注释用于单行
- 多行注释用于多行
- 块注释通常用于提供对文件,方法,数据结构和算法的描述.块注释被置于每个文件的开始处以及每个方法之前.它们也可以用于其他地方,比如方法内部.在功能和方法内部的块注释应该和它们所描述的代码具有一样的缩进格式.块注释之首应该有一个空行,用于把块注释和代码分割开来
-----
*写一个函数,能够遍历一个文件夹下的所有文件和子文件夹*
#+BEGIN_SRC 
<?php
function scan_dir_file($dir) {
	$files = array();
	if ($handle = opendir($dir)) {
		while (($file = readdir($handle)) !== false) {
			if ($file != '.' && $file != '..') {
				if (is_dir($dir . '/' . $file)) {
					$files[$file] = scan_dir_file($dir . '/' . $file);
				} else {
					$files[] = $file;
				}
			}
		}
		closedir($handle);
		return $files;
	}
}

#+END_SRC
-----
*UTF-8 编码下,下面程序输出什么,为什么?*
#+BEGIN_SRC 
echo strlen('Welcome to 多酷');
#+END_SRC
*17*,因为在UTF-8编码下,一个英文字符占用一个字节,空格占用一个字节,一个汉字占用三个字节
-----
*简述以下memcache和redis的区别*
- redis和memcache都是将数据存放在内存中,都是内存数据库,不过memcache还可以用于缓存其它东西,例如图片,视频等
- redis不仅仅支持简单的K(key)/V(value)类型的数据
- redis当物理内存用时,可以将一些很久没用用到的 value 交换到磁盘
- memcache挂掉后,数据不可恢复,redis数据丢失后可以通过aof恢复
- redis支持数据持久化,可以将内存中的数据保持在磁盘中,重启的时候可以再次加载进行使用
-----
*谈谈序列化和反序列化的作用*
- 序列化: 指将php中 对象 类 数组 变量 匿名函数等,转化为字符串
- 反序列化: 将字符串转化为 对象 类 数组 变量 匿名函数
- 序列化在每个编程语言中都存在
- 广义的说,将一个word保存为docx,这就是序列化的过程,打开docx文档,显示内容,就是反序列化的过程
- 序列化之后,会返回一个可存储的字符串,有利于存储或传递php的值,同时不丢失其数据类型和结构
-----
*列举出几个php魔术常量*
- ~__FILE__~ 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名
- ~__LINE__~ 文件中的当前行号
- ~__DIR__~ 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠
- ~__FUNCTION__~ 函数名称。返回该函数被定义时的名字（区分大小写）
- ~__CLASS__~ 类的名称。返回该类被定义时的名字（区分大小写）
-----
*php是用什么语言编写的*
#+BEGIN_QUOTE
c
#+END_QUOTE
-----
*请列出php的8种数据类型*
#+BEGIN_QUOTE
4种标量类型: boolean(布尔型) integer(整形) float(浮点型,也称作 double) string(字符串)

2种符合类型: array(数组) object(对象)

2种特殊类型: resource(资源) NULL(NULL)
#+END_QUOTE
-----
*$m = " MY name IS PHP " 编程实现将$m中的字符串前后的空格以及中间的空格去掉,并全部转换为小写字母,最后输出$m和$m中的字母的个数*
#+BEGIN_SRC 
<?php
$m = ' MY name IS PHP ';
$m = str_replace(' ', '', $m);
$m = strtolower($m);
echo $m;
echo strlen($m);

#+END_SRC
-----
*$m = "woxihuanphp" 编程实现: 将字符串分割为单个字符存放到一个数组中,并打印数组*
#+BEGIN_SRC 
<?php
$m = 'woxihuanphp';
$len = strlen($m);
for ($i = 0; $i < $len; $i++) {
    $array[] = substr($m, $i, 1);
}
print_r($array);

#+END_SRC
-----
*php中单引号和双引号的区别,哪个速度更快?*
#+BEGIN_QUOTE
在php中,单引号内的数据不会被解析(任何变量和特殊转义符),所以更快,而双引号内的数据会被解析,如变量($var)值会被代入字符串中,特殊转义符也会被解析成特定的单个字
#+END_QUOTE
-----
*防止SQL注入一般用什么函数?*
#+BEGIN_QUOTE
addslashes()
#+END_QUOTE
-----
*sort() asort() ksort() 有什么区别*
- sort() 对数组进行排序,函数结束时数组单元将被从最低到最高从新安排
- asort() 对数组进行排序,数组的索引保持和单元的关联
- ksort() 对数组按照键名排序,保留键名到数据的关联
-----
*写出session的运行机制*
#+BEGIN_QUOTE
浏览器第一次打开网站页面,服务器自动生成sessionid,响应给浏览器,浏览器把这个sessionid保存到cookie中,再次打开这个网站页面时将cookie保存的sessionid发送给服务器,session变量中储存的值存在服务器中,浏览器只有sessionid的值,当浏览器关闭页面或者sessionid超时,session自动注销
#+END_QUOTE
-----
*抓取远程图片到本地,你会用什么函数*
#+BEGIN_SRC 
file_get_contents()
#+END_SRC
-----
*~var_dump()~和~print_r()的区别*
#+BEGIN_QUOTE
var_dump()返回表达式的类型与值,而print_r仅返回结果
#+END_QUOTE
-----
*在php中~error_reporting~这个函数的作用是什么*
#+BEGIN_QUOTE
设置应该报告何种php错误
#+END_QUOTE
-----
*什么是抽象方法*
#+BEGIN_QUOTE
我们在类里面定义的 *没有方法体* 的方法就是抽象方法,所谓的没有方法体指的是,在方法声明的时候 *没有大括号以及其中的内容* ,而是直接在声明时在方法名后加上分号结束,另外在声明抽象方法时还要加一个关键字 *abstrace* 来修饰;例如:
#+END_QUOTE
#+BEGIN_SRC
abstract function fun1();
abstract function fun2();
#+END_SRC
