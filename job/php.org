# بِسْمِ اللّهِ الرَّحْمـَنِ الرَّحِيمِ

*include require() ~include_once~ ~require_once~ 的区别*

- include 这个函数一般是放在流程控制的处理部分中。PHP 程序网页在读到 include 的文件时，才将它读进来。这种方式，可以把程序执行时的流程简单化， include() 包括并运行指定文件 在处理失败时 include 产生一个警告,被导入的程序代码都会被执行，include 有返回值
- require() 这个函数通常放在php程序的最前面，PHP 程序在执行前，就会先读入 require() 所指定引入的文件，使它变成 PHP 程序网页的一部份，require() 一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误，require() 没有返回值
- ~include_once()~ 的作用和 ~include_once()~ 是几乎相同的，唯一的差别在于 ~include_once()~ 会先检查要导入的档案是不是已经在该程序中的其它地方被导入过了，如果有的话就不会再次重复导入（这项功能有时候是很重要的，比方说要导入的里面宣告了一些你自行定义好的函数，那么如果在同一个程序重复导入这个文件，在第二次导入的时候便会发生错误讯息，因为PHP不允许相同名称的函数被重复宣告第二次）。
-----
*用什么办法检查 PHP 脚本的执行效率（通常是脚本执行时间）*
#+BEGIN_QUOTE
一般实在要检查的代码开头记录一个时间，结尾记录一个时间，取差值
#+END_QUOTE
#+BEGIN_SRC 
<?php

function microtime_float()
{
    list($usec, $sec) = explode(" ", microtime());
    return ($usec + $sec);
}

$time_start = microtime_float();
/*
 *
 */
$time_end = microtime_float();
$time = $time_end - $time_start;
echo "$time";
#+END_SRC
-----
*冒泡排序*
#+BEGIN_SRC 
<?php
$array = array(12,35,68,23,90,35,46,756);
$len = count($array);
for ($i=0; $i < $len; $i++) {
    for ($j = $i + 1; $j < $len; $j++) {
        if ($array[$i] > $array[$j]) {
            $tmp = $array[$i];
            $array[$i] = $array[$j];
            $array[$j] = $tmp;
        }
    }
}
print_r($array);
#+END_SRC
-----
*echo 和 print 的区别*
#+BEGIN_QUOTE
echo 接受参数列表， print 仅支持一个参数 
#+END_QUOTE
-----
*什么是php*
- php是一种开源脚本语言
- php是一种镶嵌在html中，运行在服务器端的脚本语言
-----
*把字符串转换为大写*
#+BEGIN_QUOTE
strtopper() 这个函数将字符串转换为大写 str to upper
#+END_QUOTE
-----
*把字符串转换为小写*
#+BEGIN_QUOTE
strtolower() 此函数将字符串转换为小写 str to lower
#+END_QUOTE
-----
*把字符串首字母转换为大写*
#+BEGIN_QUOTE
ucfirst() 此函数将字符串首字符(如果字符是字母)转换为大写字母 uc first
#+END_QUOTE
-----
*把字符串地一个字符小写*
#+BEGIN_QUOTE
lcfirst() 使一个字符串的地一个字符小写 lc first
#+END_QUOTE
-----
*把字符串中的每个单词的首字母转为大写*
#+BEGIN_QUOTE
ucwords() 将字符串中每个单词的首字母转换为大写 uc word s
#+END_QUOTE
-----
*对字符串进行大小写转换*
#+BEGIN_QUOTE
~mb_convert_case()~ 对字符串进行大小写转换,转换模式由mode指定
#+END_QUOTE
-----
*session和cookie的区别*
- cookie 数据保存在客户的浏览器上，session 数据保存在服务器上
- cookie 不是很安全，别人可能进行 cookie 欺骗，考虑到安全应当使用 session
- session 会在一定时间内保存在服务器上，当访问增多，会比较占用服务器性能，考虑到减轻服务器性能方面应当使用 cookie
- 重要的资料用 session 不重要的用 cookie
- 单个 cookie 体积限制是4k session 可以通过设置修改
-----
*如果禁用了cookie 可不可以用session*
#+BEGIN_QUOTE
可以，通常情况下 cookie 中记录了 session 的id 所以 cookie 被禁用了也就意味着 session 失效了。不过 session-id 还有另外一种传递方式，就是在url查询中携带 session-id

 session 不一定必须依赖 cookie cookie 被禁用或者出现问题时，php会自动把 session-id 附在url中，但是php.ini中的 ~session.use_trans_sid~ = 1
#+END_QUOTE
-----
*session的默认生命周期是多久*
#+BEGIN_QUOTE
关闭浏览器就失效，因为 session-id 存在于 cookie 而默认情况下 cookie 关闭浏览器即失效
#+END_QUOTE
-----
*如何设置session生命周期为30分钟*
#+BEGIN_QUOTE
在php.ini配置文件中 ~session.cookie_lifetime~ =1800 单位为秒
#+END_QUOTE
-----
*get和post提交方法的区别*
- get 和 post 理论上没有大小限制，但是 get 的长度和 url 的长度有直接关系 http协议没有对 url 长度进行限制 ie浏览器最url最大限制为 2083 字节 其他浏览器更多，所以 get 最好限制在 2083 字节
- get 放在url中，因此不安全，而 post 传输数据相对安全
-----
*检测一个变量是否有设置的函数*
#+BEGIN_QUOTE
isset() 检测变量是否设置，并且不是 NULL。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。
#+END_QUOTE
-----
*检测一个变量是否为空的函数*
#+BEGIN_QUOTE
empty() 判断一个变量是否被认为是空，如果变量是非空或非零的值，则 empty() 返回 FALSE。换句话说，""、0、"0"、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。
#+END_QUOTE
-----
*在php中插入一段html的办法*
#+BEGIN_SRC 
<?php
echo "<h1>aaaaaaaaaaaaaa</h1>";
?>
#+END_SRC
#+BEGIN_SRC
<?php
print <<< EOF
<h1>aaaaaaaaaaaaaaaa</h1>
EOT;
?>
#+END_SRC
-----
*类的属性可以序列化后保存到session中，从而以后可以回复整个类，这要用的函数是*
#+BEGIN_QUOTE
serialize() 产生一个可存储的值的表示
unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值
#+END_QUOTE
-----
*在php中，heredoc是一种特殊的字符串，它的结束标志必须*
#+BEGIN_QUOTE
heredoc的语法是用 "<<<" 加上自己定义成对的标签，在标签范围内的文字视为一个字符串
#+END_QUOTE
-----
*用php打印出前一天的时间，格式是2006-5-10 22:22:21*
#+BEGIN_QUOTE
echo date('Y-m-d H:i:s', strtotime('-1 day');
#+END_QUOTE
-----
*php的public protected private三种访问控制模式的区别*
- public 公有 任何地方都可以访问
- protected 受保护类型 用于本类和继承类调用
- private 私有类型 只能在本类中使用
-----
*写出php权限控制修饰符*
| public | protected | private |

*接口和抽象类的区别是什么*
- 抽象类 是一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字 abstract 来生命的。抽象类 与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一种 抽象方法 抽象方法 没有方法体，该方法天生就是要被子类重写的 抽象方法的格式为 abstract function abstractMethod();
- 接口 是通过 interface 关键字来声明的 接口 中的成员常量和方法都是 public 的，方法可以不写关键字 public 接口 中的方法也是没有方法体。接口 中的方法也天生就是要被子类实现的
- 抽象类 和 接口 实现的功能十分相似，最大的不同是 接口 能实现多继承。
- 子类继承 抽象类 使用 extends 子类实现 接口 使用 implements
-----
*类中如何定义常量*
#+BEGIN_QUOTE
类中的常量也就是成员常量，常量就是不会改变的量，是一个恒值。定义常量使用关键字 const 例如 const pl = 3.14;
#+END_QUOTE
-----
*如何类中调用常量，如何类外调用常量*
#+BEGIN_QUOTE
无论类内还是类外，常量的访问和变量是不一样的，常量不需要实例化对象，访问常量的格式都是类型加作用域操作符（双冒号）来调用，即 类名::类常量名
#+END_QUOTE
-----
*~__autoload()~ 函数是如何运作的*
#+BEGIN_QUOTE
使用这个魔术函数的基本条件是 类文件 的 文件名 要和 类的名字 保持一致。

当程序执行到实例化某个类的时候，如果在实例化前没有引入这个类文件，那么自动执行 ~__autoload()~ 函数

这个函数会根据实例化的类的名称来查找这个类文件的路径，当判断这个类文件路径下确实存在这个类文件后就来载入这个类，然后程序继续执行，如果这个路径下不存在该文件时就提示错误
#+END_QUOTE
-----
*哪种oop设计模式能让类在整个脚本里中实例化一次*
#+BEGIN_QUOTE
单件模式
#+END_QUOTE
-----
*借助继承，我们可以创建其他类的派生类，在php中，子类最多可以继承几个父类*
#+BEGIN_QUOTE
1个
#+END_QUOTE
-----
*写出你知道的几种设计模式*
#+BEGIN_QUOTE
单例模式 工厂模式
#+END_QUOTE
-----
*执行以下代码，输出的结果是*
#+BEGIN_SRC 
<?php
    abstract class a{
        function __construct()
        {
            echo "a";
        }
    }

    $a = new a();
#+END_SRC
致命错误，因为类a是抽象类，不能被实例化
-----
*执行以下代码，输出结果是*
#+BEGIN_SRC 
<?php
class a{
    function __construct(){
        echo "echo class a something";
    }
}

class b extends a{
    function __construct(){
        echo "echo class b something";
    }
}

$a = new b();
#+END_SRC
echo class b somehing
-----
#+BEGIN_QUOTE
类b继承类a，两个类都定义了构造函数，由于二者名称相同，所以子类中的构造函数覆盖了父类的构造函数，要想子类对象实例化时也执行父类的构造函数，需要在子类构造函数中使用 ~parent::__construct()~ 来显示调用父类构造函数
#+END_QUOTE
*请定义一个名为MyClass的类，这个类只有一个静态方法justDoIt*
#+BEGIN_SRC 
<?php
class MyClass
{
    public static function justDoIt() {
    }
}
#+END_SRC
-----
*只有该类才能访问该类的私有变量吗*
#+BEGIN_QUOTE
是的
#+END_QUOTE
-----
*写出下列程序的输出结果*
#+BEGIN_SRC 
<?php
    class a
    {
        protected $c;

        public function a()
        {
            $this ->c = 10;
        }
    }
    
    class b extends a
    {
        public function print_data()
        {
            return $this->c;
        }
    }

    $b = new b();
    echo $b->print_data();
#+END_SRC
输出结果 10
-----
*写出构造函数和析构函数*
- 构造函数 __construct
- 析构函数 __destruct
-----
*下面这段代码是什么意思*
#+BEGIN_SRC 
<?php
    class test
    {
        function get_test($num) {
            $num = md5(md5($num)."en");
        }
    }

    $testobject = new test();
    $encryption = $testobject->get_test("abc");
    echo $encryption;
#+END_SRC
双重md5加密
-----
*如何声明一个名为"myclass"的没有方法和属性的类*
#+BEGIN_SRC 
<?php
    class myclass
    {
    }
#+END_SRC
-----
*如何实例化一个名为"myclass"的对象*
#+BEGIN_SRC 
<?php
    $obj = new myclass();
#+END_SRC
-----
*在php中 ~error_reporting() 这个函数有什么作用*
#+BEGIN_QUOTE
~error_reporting()~ 用于设置php的侦听错误的级别
#+END_QUOTE
-----
*php如何限制上传文件的大小*
#+BEGIN_QUOTE
- ~upload_max_filesize~ 默认是2M
- ~post_max_size~ 默认是8M
#+END_QUOTE
-----
*数据库中的事务是什么*
#+BEGIN_QUOTE
事务 是作为一个逻辑单元执行的一系列操作，一个逻辑工作单元必须有四个属性，称为 ACID (原子性 一致性 隔离性 持久性)
#+END_QUOTE
- 原子性 事务 必须是原子工作单元，对其数据修改，要么全部执行，要不全部不执行
- 一致性 事务 在完成时，必须使所有的数据都保持一致状态。在数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性 事务 结束时，所有的内部数据（如B树索引或双向链表）都必须是正确的
- 隔离性 由 并发事务 所作的修改必须与任何其他 并发事务 所做的修改隔离 事务 查看数据时数据所处的状态，要么是另一 并发事务 修改它之前的状态，要么是另一 事务 修改它之后的状态 事务 不会查看中间状态的数据。这称为 可串行性 因为它能够重新装载起始数据，并且重播一系列 事务 以使数据结束时状态与 原始事务 执行的状态相同
- 持久性 事务 完成之后，它对于系统的影响是永久性的。该修改即使出现系统故障也将一直保持
-----
*mysql取得当前时间的函数*
#+BEGIN_QUOTE
NOW() 该函数返回当前系统的日期和时间
#+END_QUOTE
#+BEGIN_SRC sql
SELECT NOW();
#+END_SRC
-----
*mysql格式化日期的函数*
#+BEGIN_QUOTE
DATE_FORMAT($date, $format)
#+END_QUOTE
#+BEGIN_SRC sql
DATE_FORMAT(NOW(), '%Y %m %%d');
#+END_SRC
-----
*如何查看sql语句执行时间*
#+BEGIN_QUOTE
explain
#+END_QUOTE
-----
*请给出sql语句优化的几种方案*
- 尽量选择较小的列
- 将 where 中用的比较频繁的字段建立索引
- select 子句中避免使用 *
- 避免在索引例上使用计算 not in < > 等操作
- 当只需要一行数据的时候使用 limit 1
- 保证单表数据不超过200w，适时分割表
-----
*MyISAM和InnoDB的区别*
- 构成上，MyISAM 的表在磁盘中有三个文件组成，分别是 表定义文件(.frm) 数据文件(.MYD) 索引文件(.MYI) 而 InnoDB 的表由 表定义文件(.frm) 表空间数据和日志文件组成
- 安全方面 MyISAM 强调的是性能，其查询效率较高，但不支持事务和外键等安全性能方面的功能，而 InnoDB 支持事务和外键等高级功能，查询效率稍低
- 对锁的支持 MyISAM 支持表锁，而 InnoDB 支持行锁
-----
*数据库索引分几类，分别是什么*
| 主索引 | 唯一索引 | 普通索引 | 全文索引 |
-----
*什么时候使用索引*
#+BEGIN_QUOTE
并非所有的数据库都以相同的方式使用索引，作为通用规则，只有当经常查询列中的数据时，才需要在表上创建索引
#+END_QUOTE
-----
*索引的目的是什么*
- 快速访问数据表中特定的信息，提高检索速度
- 创建唯一索引，保证数据库表中每一行数据的唯一性
- 加速表与表之间的连接
- 使用分组和排序子句进行数据检索时，可以显著减少查询分组和排序的时间
-----
*为数据表建立索引的原则有哪些*
- 在最频繁使用的，用以缩小查询范围的字段上建立索引
- 在频繁使用的，需要排序的字段上建立索引
-----
*索引对数据库负面的影响是什么*
- 创建索引维护索引需要消耗时间，这个时间随着数据量的增加而增加
- 索引需要占用物理空间，不光是表需要占用物理空间，每个索引也需要占用物理空间
- 当对表进行 增 删 改 查 的时候索引也需要动态的维护，这样就降低了数据的维护速度
-----
*什么情况下不宜建立索引*
- 对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引
- 对于一些特殊的据哭类型，不宜建立索引，比如文本字段等
-----
*内连接和外链接的区别*
- 内连接取两个表的交集，外连接分左和右，左连接取左边的全部，右连接取右边的全部
- 内连接，进行连接的两个表对应的想匹配的字段完全相同的连接
- 左连接(LEFT OUTER JOIN)，两个表左连接时会返回左边表中的所有行和右边表中与之相匹配的列值，如果没有则用空值代替
- 右连接(RIGHT OUTER JOIN)，两个表进行右连接时会返回右边表中的所有的行和左边表中与之想匹配的列值，没有匹配的用空值代替
